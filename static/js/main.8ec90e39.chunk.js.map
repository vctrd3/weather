{"version":3,"sources":["Icons.js","Weather.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Icons","id","Weather","react_default","a","createElement","className","this","props","location","desc","temp","style","fontSize","backgroundColor","borderRadius","padding","error","Component","Form","onSubmit","getWeather","type","name","App","capitalize","str","charAt","toUpperCase","slice","state","icon","e","preventDefault","city","target","value","url","axios","get","then","res","console","log","_this","setState","data","main","weather","toTitleCase","description","catch","err","reset","replace","txt","substr","toLowerCase","src_Form","src_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ec90e39.chunk.js","sourcesContent":["\r\nconst Icons = (id) =>{\r\n    if (id >= 200 && id < 300) {\r\n        return 'wi wi-thunderstorm';\r\n      } else if (id >= 300 && id < 400) {\r\n        return 'wi wi-rain-mix';\r\n      } else if (id >= 500 && id < 600) {\r\n        return 'wi wi-rain';\r\n      } else if (id >= 600 && id < 700) {\r\n          return 'wi wi-snow';\r\n      } else if (id >= 700 && id < 800) {\r\n          return 'wi wi-windy';\r\n      } else if (id  === 800) {\r\n          return 'wi wi-day-sunny';\r\n      } else if (id >= 801 && id < 900) {\r\n          return 'wi wi-cloudy';\r\n      } else if (id >= 900 && id < 907) {\r\n          return 'wi wi-showers';\r\n      } else if (id >= 907 && id < 1000) {\r\n          return 'wi wi-day-cloudy-high';\r\n      } else {\r\n          return '';\r\n      }\r\n}\r\n\r\nexport default Icons","import React, {Component} from 'react';\r\nimport Icons from './Icons'\r\n\r\nclass Weather extends Component {\r\n\r\nrender(){ \r\n\r\n    const iconStyle={\r\n        fontSize: '50px',\r\n        backgroundColor: '#bfd8d5',\r\n        borderRadius: '50%',\r\n        padding:'30px'\r\n    }\r\n    \r\nreturn(\r\n    \r\n    <div className=\"container\">\r\n        <div><h1>{this.props.location}</h1></div>\r\n        <div><h4>{this.props.desc}</h4></div>\r\n        <div>{this.props.temp && <i className={Icons(this.props.id)} style={iconStyle}></i>}</div>\r\n        <div>{this.props.temp && <h2>{this.props.temp} Â°F</h2>}</div>\r\n        <div className=\" red-text accent-1 \"><h5>{this.props.error} </h5></div>  \r\n    </div>\r\n\r\n)\r\n}\r\n}\r\n\r\nexport default Weather;","import React, {Component} from 'react';\r\nimport './index.css';\r\n\r\nclass Form extends Component {\r\n    render(){\r\n    return(\r\n            <div className=\"container center\">\r\n                <form onSubmit={this.props.getWeather}>\r\n                    <div className=\"row\">\r\n                    <div className=\"input-field col s8 offset-s2\">\r\n                        <label>Enter City</label>\r\n                        <input type=\"text\" name=\"city\"></input>\r\n                    </div></div>\r\n                    <button className=\"btn\">Submit</button>\r\n                </form>\r\n            </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\nimport Weather from './Weather'\nimport Form from './Form'\nimport axios from 'axios';\nimport './index.css';\n\nclass App extends Component {\n    capitalize = (str) =>{\n        return str.charAt(0).toUpperCase() + str.slice(1);\n        };\n\n    toTitleCase(str) {\n        return str.replace(/\\w\\S*/g, function(txt){\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n        }\n\n    state={\n        location:null,\n        temp:null,\n        error:null,\n        icon:null,\n        desc:null,\n        id:null,\n    }\n\n    getWeather = (e) => {\n        e.preventDefault();\n        \n        let city= e.target.city.value;\n        if(city){\n        const url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&units=imperial&APPID=0e25ca7b600cae8be4d83fffd5f5cef3'\n        axios.get(url)\n        .then(res=>{\n            console.log(res)\n            \n            this.setState({\n                location:res.data.name,\n                temp:res.data.main.temp,\n                error:null,\n                icon:res.data.weather[0].icon,\n                desc:this.toTitleCase(res.data.weather[0].description),\n                id:res.data.weather[0].id,\n            })\n        })\n        .catch(err=>{\n            console.log(err)\n            this.setState(\n                {\n                    location:null,\n                    temp:null,\n                    icon:null,\n                    desc:null,\n                    id:null,\n                    error:'Please enter a valid city',\n                }\n            )\n        })\n    }\n\n    e.target.reset();\n    }\n\n    render(){\n        \n        return(\n            <div className=\"container z-depth-2\">\n                <div className=\"center\">\n                <h1><p><i className=\"fas fa-sun\"></i> Weather</p></h1>\n                    <Form getWeather={this.getWeather}/>\n                    <Weather \n                    location={this.state.location}\n                    temp={this.state.temp}\n                    icon={this.state.icon}\n                    desc={this.state.desc}\n                    id={this.state.id}\n                    error={this.state.error}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}